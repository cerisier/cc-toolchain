load("@bazel_skylib//rules:select_file.bzl", "select_file")
load("@aspect_bazel_lib//lib:run_binary.bzl", "run_binary")
load("//toolchain:selects.bzl", "platform_extra_binary")
load(":glibc_stubs_assembly_files.bzl", "glibc_stubs_assembly_files")
load(":libc_aware_target_triple.bzl", "libc_aware_target_triple")
load(":libc_shared_library.bzl", "make_glibc_shared_library")

LIBC_SO_VERSIONS = {
    "ld": "",
    "c": "6",
    "dl": "2",
    "m": "6",
    "pthread": "0",
    "resolv": "2",
    "rt": "1",
    "util": "1",
}

alias(
    name = "glibc-stubs-generator",
    actual = platform_extra_binary("bin/glibc-stubs-generator"),
)

# Generate assembly files for the glibc (one per lib)
glibc_stubs_assembly_files(
    name = "generate_glibc_stubs",
    target = libc_aware_target_triple(),
    abilist = "@zig-srcs//:glibc_abilists",
    visibility = ["//visibility:public"],
)

# Make one target per lib assembly file
[
    select_file(
        # Note the .S suffix.
        # This is only to avoid warnings about unused flags because rules_cc
        # treat most flags as compile_actions and most flags are not used
        # for non preprocessed assembly actions.
        name = "lib" + lib + ".S" if lib != "ld" else lib + ".S",
        srcs = ":generate_glibc_stubs",
        subpath = "glibc/build/" + lib + ".S",
        visibility = ["//visibility:public"],
    ) for lib in LIBC_SO_VERSIONS.keys()
]

select_file(
    name = "all.map",
    srcs = ":generate_glibc_stubs",
    subpath = "glibc/build/all.map",
    visibility = ["//visibility:public"],
)

# Make one cc_shared_library target per lib, using the assembly file
LIBS = [
    make_glibc_shared_library(
        lib_name = "lib" + lib if lib != "ld" else lib,
        lib_version = version,
        srcs = [":lib" + lib + ".S" if lib != "ld" else lib + ".S",],
        extra_link_flags = [
            # _IO_stdin_used is defined as a global symbol in .rodata
            # and needs to be relocated at runtime with values from the CRTs.
            "-z",
            "notext",
        ] if lib == "c" else [],
    ) for (lib, version) in LIBC_SO_VERSIONS.items()
]

sh_binary(
    name = "create_glibc_search_directory",
    srcs = ["copy_glibc.sh"],
)

# Create a directory that will act as a search path for the libraries
# Some invocations have -lc copts so we need to support those in a hermetic
# context. I had the choice between creating a directory layout or making a
# compiler wrapper that would ignore specific -l flags.
#
# > I chose the layout because it will also serve the purpose of generating
# > sysroots for those who want this instead.
run_binary(
    name = "search_directory",
    tool = ":create_glibc_search_directory",
    srcs = LIBS,
    args = ["$(location :{})".format(lib) for lib in LIBS],
    env = {
        "OUTPUT_DIR": "$(RULEDIR)/libs",
    }, 
    out_dirs = ["libs"],
    visibility = ["//visibility:public"],
)


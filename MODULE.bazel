module(
    name = "cc-toolchain",
    version = "0.0.1",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.14.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "with_cfg.bzl", version = "0.9.2")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")    

http_archive(
    name = "static-toolchain-artifacts-darwin-arm64",
    urls = ["https://github.com/cerisier/static-toolchains-artifacts/releases/download/0.0.1/static-toolchain-artifacts-darwin-arm64.tar.zst"],
    strip_prefix = "static-toolchain-artifacts-darwin-arm64",
    integrity = "sha256-nFGFEZtpuqtrW2XmdvOeGU/kLwPGC0pxnkebHUsMF50=",
    build_file = "//bootstrap/llvm:BUILD.llvm_release.tpl",
)
# local_path_override(
#     module_name = "static-toolchain-artifacts-darwin-arm64",
#     path = "static-toolchain-artifacts-darwin-arm64",
# )

http_archive(
    name = "static-toolchain-artifacts-linux-arm64",
    urls = ["https://github.com/cerisier/static-toolchains-artifacts/releases/download/0.0.1/static-toolchain-artifacts-linux-arm64.tar.zst"],
    strip_prefix = "static-toolchain-artifacts-linux-arm64",
    build_file = "//bootstrap/llvm:BUILD.llvm_release.tpl",
)
# local_path_override(
#     module_name = "static-toolchain-artifacts-linux-arm64",
#     path = "static-toolchain-artifacts-linux-arm64",
# )   

http_archive(
    name = "static-toolchain-artifacts-linux-x86_64",
    urls = ["https://github.com/cerisier/static-toolchains-artifacts/releases/download/0.0.1/static-toolchain-artifacts-linux-x86_64.tar.zst"],
    strip_prefix = "static-toolchain-artifacts-linux-x86_64",
    build_file = "//bootstrap/llvm:BUILD.llvm_release.tpl",
)
# local_path_override(
#     module_name = "static-toolchain-artifacts-linux-x86_64",
#     path = "static-toolchain-artifacts-linux-x86_64",
# )

http_archive(
    name = "zig-srcs",
    urls = ["https://github.com/ziglang/zig/archive/ddcf6fcdf3452a4a7d55a27e7112e794447120b6.tar.gz"],
    strip_prefix = "zig-ddcf6fcdf3452a4a7d55a27e7112e794447120b6",
    integrity = "sha256-sYdt1inP/EQX/kYjlpelnAK+iVaGT6MDbvynHKUDd7g=",
    build_file = "//overlays/ziglang/zig:BUILD.tpl",
)

http_archive(
    name = "compiler-rt",
    urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.1/compiler-rt-20.1.1.src.tar.xz"],
    strip_prefix = "compiler-rt-20.1.1.src",
    integrity = "sha256-xPdTEXzb/+Watd86rUknk+awKaJZGYyEO7C5yCxZ700=",
    build_file = "//overlays/llvm-project/compiler-rt:BUILD.tpl",
)

http_pkg_archive = use_repo_rule("//:http_pkg_archive.bzl", "http_pkg_archive")
http_pkg_archive(
    name = "macosx15.4.sdk",
    urls = ["https://swcdn.apple.com/content/downloads/10/32/082-12052-A_AHPGDY76PT/1a419zaf3vh8o9t3c0usblyr8eystpnsh5/CLTools_macOSNMOS_SDK.pkg"],
    strip_files = [
        "Library/Developer/CommandLineTools/SDKs/MacOSX15.4.sdk/System/Library/Frameworks/Ruby.framework/Versions/Current/Headers/ruby",
    ],
    sha256 = "f8b0600aa4ad9b0b0b150fb62691dc561f47bc33ebc40546439f1460a0680913",
    build_file = "//overlays/macosx.sdk:BUILD.MacOSX15.4.sdk.tpl",
    strip_prefix = "Library/Developer/CommandLineTools/SDKs/MacOSX15.4.sdk",
)
# local_path_override(
#     module_name = "macosx15.4.sdk",
#     path = "_overrides/MacOSX15.4.sdk",
# )

## DEV DEPENDENCIES

HERMETIC_CC_TOOLCHAIN_COMMIT = "1f46faadb5c2751ec96fa8b34e41179b78fa3e7e" # unreleased commit for dev_dependency

bazel_dep(name = "hermetic_cc_toolchain", version = "3.2.0", dev_dependency = True)
archive_override(
    module_name = "hermetic_cc_toolchain",
    urls = ["https://github.com/uber/hermetic_cc_toolchain/archive/{}.tar.gz".format(HERMETIC_CC_TOOLCHAIN_COMMIT)],
    integrity = "sha256-HC0MsB/XIZXsX4zN/rudu5VsBchObbm8fZ4HShFdxXg=",
    strip_prefix = "hermetic_cc_toolchain-{}".format(HERMETIC_CC_TOOLCHAIN_COMMIT),
)

GLIBC_STUBS_GENERATOR_COMMIT = "8e02eb59503781f352ef6b9caf980da96e9a36c3"

bazel_dep(name = "glibc-stubs-generator", version = "0.0.1", dev_dependency = True)
archive_override(
    module_name = "glibc-stubs-generator",
    urls = ["https://github.com/cerisier/glibc-stubs-generator/archive/{}.tar.gz".format(GLIBC_STUBS_GENERATOR_COMMIT)],
    integrity = "sha256-TYyydxwJBbo4TSGQdVxfGNWEowLSBvoNWSfb4lQT7Kg=",
    strip_prefix = "glibc-stubs-generator-{}".format(GLIBC_STUBS_GENERATOR_COMMIT),
)
# local_path_override(
#     module_name = "glibc-stubs-generator",
#     path = "../glibc-stubs-generator",
# )

toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains", dev_dependency = True)
use_repo(toolchains, "zig_sdk")

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps", dev_dependency = True)
use_repo(non_module_deps, "llvm-raw", "llvm_zlib", "llvm_zstd", "vulkan_headers")

bazel_dep(name = "rules_python", version = "0.40.0", dev_dependency = True)
llvm_configure = use_repo_rule("@llvm-raw//utils/bazel:configure.bzl", "llvm_configure")
llvm_configure(name = "llvm-project")

register_toolchains(
    "@zig_sdk//libc_aware/toolchain:linux_arm64_musl",
    "@zig_sdk//libc_aware/toolchain:linux_amd64_musl",
    # Fine until we want to build for macOS on CI
    # We can remove once we are bootstrzapped and have a real clang and ld from llvm
    # "@zig_sdk//toolchain:darwin_amd64",
    # "@zig_sdk//toolchain:darwin_arm64",
    dev_dependency = True,
)

## OVERRIDES PORTS FROM DEPENDENCIES 

RULES_ZIG_COMMIT = "b9739c615ce62b64ee595ac4bcd9ee7cc06b0422" # branch=zml

bazel_dep(name = "rules_zig", version = "20250314.0-b9739c6", dev_dependency = True)
archive_override(
    module_name = "rules_zig",
    urls = ["https://github.com/zml/rules_zig/archive/{}.tar.gz".format(RULES_ZIG_COMMIT)],
    integrity = "sha256-p1rYD9gvYS3DgBjN6jo1pB86Kr4k2wojKjVpYRTZ3Us=",
    strip_prefix = "rules_zig-{}".format(RULES_ZIG_COMMIT),
)

zig = use_extension("@rules_zig//zig:extensions.bzl", "zig", dev_dependency = True)
zig.index(file = "//:zig_index.json")
zig.toolchain(zig_version = "0.14.0")
zig.mirrors(urls = [
    "https://mirror.zml.ai/zig",
])
use_repo(zig, "zig_toolchains")

register_toolchains("@rules_zig//zig/target:all", dev_dependency = True)
register_toolchains("@zig_toolchains//:all", dev_dependency = True)


# setting them last 
register_toolchains(
    "//toolchain/stage2:stage2_toolchain",
    "//toolchain:xclang_toolchain",
)

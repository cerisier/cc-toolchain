module(
    name = "cc-toolchain",
    version = "0.0.0",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.14.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "with_cfg.bzl", version = "0.9.1")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")    

http_archive(
    name = "static-toolchain-artifacts-darwin-arm64",
    urls = ["https://github.com/cerisier/static-toolchains-artifacts/releases/download/0.0.1/static-toolchain-artifacts-darwin-arm64.tar.zst"],
    strip_prefix = "static-toolchain-artifacts-darwin-arm64",
    build_file = "//:BUILD.artifacts.tpl",
)
# local_path_override(
#     module_name = "static-toolchain-artifacts-darwin-arm64",
#     path = "static-toolchain-artifacts-darwin-arm64",
# )

http_archive(
    name = "static-toolchain-artifacts-linux-arm64",
    urls = ["https://github.com/cerisier/static-toolchains-artifacts/releases/download/0.0.1/static-toolchain-artifacts-linux-arm64.tar.zst"],
    strip_prefix = "static-toolchain-artifacts-linux-arm64",
    build_file = "//:BUILD.artifacts.tpl",
)
# local_path_override(
#     module_name = "static-toolchain-artifacts-linux-arm64",
#     path = "static-toolchain-artifacts-linux-arm64",
# )   

http_archive(
    name = "static-toolchain-artifacts-linux-x86_64",
    urls = ["https://github.com/cerisier/static-toolchains-artifacts/releases/download/0.0.1/static-toolchain-artifacts-linux-x86_64.tar.zst"],
    strip_prefix = "static-toolchain-artifacts-linux-x86_64",
    build_file = "//:BUILD.artifacts.tpl",
)
# local_path_override(
#     module_name = "static-toolchain-artifacts-linux-x86_64",
#     path = "static-toolchain-artifacts-linux-x86_64",
# )

http_archive(
    name = "zig-srcs",
    urls = ["https://github.com/ziglang/zig/archive/refs/tags/0.14.0.tar.gz"],
    strip_prefix = "zig-0.14.0",
    integrity = "sha256-tFWJt4KpQGpBSjysIBygJDZQ+b7ctFNzDBJL9vB6sz8=",
    build_file = "//overlays/ziglang/zig:BUILD.tpl",
)

http_archive(
    name = "compiler-rt",
    urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.1/compiler-rt-20.1.1.src.tar.xz"],
    strip_prefix = "compiler-rt-20.1.1.src",
    integrity = "sha256-xPdTEXzb/+Watd86rUknk+awKaJZGYyEO7C5yCxZ700=",
    build_file = "//overlays/llvm-project/compiler-rt:BUILD.tpl",
)

register_toolchains(
    "//toolchain/bootstrap:bootstrap_toolchain",
    "//toolchain:xclang_toolchain",
)

## DEV DEPENDENCIES

bazel_dep(name = "hermetic_cc_toolchain", version = "3.2.0")
bazel_dep(name = "glibc-stubs-generator", version = "0.0.0")
local_path_override(
    module_name = "glibc-stubs-generator",
    path = "../glibc-stubs-generator",
)

toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(toolchains, "zig_sdk", "zig_sdk-linux-amd64", "zig_sdk-linux-arm64", "zig_sdk-macos-amd64", "zig_sdk-macos-arm64", "zig_sdk-windows-amd64")

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps")
use_repo(non_module_deps, "llvm-raw", "llvm_zlib", "llvm_zstd", "vulkan_headers")

# bazel_dep(name = "rules_python", version = "1.2.0") # dependency from llvm-project
bazel_dep(name = "rules_python", version = "0.29.0")
llvm_configure = use_repo_rule("@llvm-raw//utils/bazel:configure.bzl", "llvm_configure")
llvm_configure(name = "llvm-project")

register_toolchains(
    "@zig_sdk//libc_aware/toolchain:linux_arm64_musl",
    "@zig_sdk//libc_aware/toolchain:linux_amd64_musl",
    # Fine until we want to build for macOS on CI
    # We can remove once we are bootstrzapped and have a real clang and ld from llvm
    # "@zig_sdk//toolchain:darwin_amd64",
    # "@zig_sdk//toolchain:darwin_arm64",
)

## OVERRIDES PORTS FROM DEPENDENCIES 

RULES_ZIG_COMMIT = "b9739c615ce62b64ee595ac4bcd9ee7cc06b0422" # branch=zml

bazel_dep(name = "rules_zig", version = "20250314.0-b9739c6")
archive_override(
    module_name = "rules_zig",
    urls = ["https://github.com/zml/rules_zig/archive/{}.tar.gz".format(RULES_ZIG_COMMIT)],
    integrity = "sha256-p1rYD9gvYS3DgBjN6jo1pB86Kr4k2wojKjVpYRTZ3Us=",
    strip_prefix = "rules_zig-{}".format(RULES_ZIG_COMMIT),
)

zig = use_extension("@rules_zig//zig:extensions.bzl", "zig")
zig.index(file = "//:zig_index.json")
zig.toolchain(zig_version = "0.14.0")
zig.mirrors(urls = [
    "https://mirror.zml.ai/zig",
])
use_repo(zig, "zig_toolchains")

register_toolchains("@rules_zig//zig/target:all")
register_toolchains("@zig_toolchains//:all")


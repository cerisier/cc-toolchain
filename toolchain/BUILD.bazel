load("@rules_cc//cc/toolchains:tool.bzl", "cc_tool")
load("@rules_cc//cc/toolchains:tool_map.bzl", "cc_tool_map")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
load("@rules_cc//cc/toolchains/impl:documented_api.bzl", "cc_args_list")
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("//toolchain:selects.bzl", "platform_llvm_binary", "platform_llvm_binaries")

# This `select` happens under the target configuration. For macOS,
# llvm-libtool-darwin should be used when creating static libraries even if the
# exec platform is linux.
alias(
    name = "all_tools",
    actual = select({
        "@platforms//os:macos": ":macos_tools",
        "//conditions:default": ":default_tools",
    }),
    visibility = ["//visibility:public"],
)

COMMON_TOOLS = {
    "@rules_cc//cc/toolchains/actions:assembly_actions": ":clang",
    "@rules_cc//cc/toolchains/actions:c_compile": ":clang",
    "@rules_cc//cc/toolchains/actions:cpp_compile_actions": ":clang++",
    "@rules_cc//cc/toolchains/actions:link_actions": ":lld",
    "@rules_cc//cc/toolchains/actions:objcopy_embed_data": ":llvm-objcopy",
    "@rules_cc//cc/toolchains/actions:strip": ":llvm-strip",
}

cc_tool_map(
    name = "default_tools",
    tools = COMMON_TOOLS | {
        "@rules_cc//cc/toolchains/actions:ar_actions": ":llvm-ar",
    },
    visibility = ["//visibility:private"],
)

cc_tool_map(
    name = "macos_tools",
    tools = COMMON_TOOLS | {
        "@rules_cc//cc/toolchains/actions:ar_actions": ":llvm-libtool-darwin",
    },
    visibility = ["//visibility:private"],
)

cc_tool(
    name = "clang",
    src = platform_llvm_binary("bin/clang"),
)

cc_tool(
    name = "clang++",
    src = platform_llvm_binary("bin/clang++"),
)

cc_tool(
    name = "lld",
    src = platform_llvm_binary("bin/clang++"),
    data = platform_llvm_binaries([
        "bin/ld.lld",
        "bin/ld64.lld",
        "bin/lld",
    ]),
)

cc_tool(
    name = "llvm-ar",
    src = platform_llvm_binary("bin/llvm-ar"),
)

cc_tool(
    name = "llvm-libtool-darwin",
    src = platform_llvm_binary("bin/llvm-libtool-darwin"),
)

cc_tool(
    name = "llvm-objcopy",
    src = platform_llvm_binary("bin/llvm-objcopy"),
)

cc_tool(
    name = "llvm-strip",
    src = platform_llvm_binary("bin/llvm-strip"),
)

##
##
##


cc_args_list(
    name = "default_link_flags",
    args = select({
        "@platforms//os:macos": [
            "//toolchain/args/macos:macos_default_link_flags",
        ],
        "//conditions:default": [],
    }, no_match_error = "Unsupported platform for default_link_flags"),
)

cc_args_list(
    name = "default_libs",
    args = select({
        "@platforms//os:macos": [
            "//toolchain/args/macos:macos_default_libs",
        ],
        "@platforms//os:linux": [
            "//toolchain/args/linux:linux_default_libs",
        ],
        "//conditions:default": [],
    }, no_match_error = "Unsupported platform for default_libs"),
)

cc_args_list(
    name = "macos_toolchain_args",
    args = [
        # hermetic compile flags as well ?,
        "//toolchain/args/macos:macos_sdk_sysroot",
        "//toolchain/args/macos:macos_minimum_os_flags",
        "//toolchain/args:llvm_target_for_platform",
        "//toolchain/args:libcxx_headers_include_paths",
        "//toolchain/args:posix_headers_include_paths",
        # "libc_include_paths",

        # Link
        # "//toolchain/args/macos:hermetic_link_args",
        "//toolchain/args:use_lld",
        ":default_link_flags",
        ":default_libs",
    ],
)

cc_args_list(
    name = "linux_toolchain_args",
    args = [
        # hermetic compile flags as well ?,
        "//toolchain/args/linux:linux_no_sysroot",
        "//toolchain/args:llvm_target_for_platform",
        "//toolchain/args:libcxx_headers_include_paths",
        "//toolchain/args:posix_headers_include_paths",
        "//toolchain/args/linux:linux_system_headers_include_paths",
        "//toolchain/args/linux:glibc_headers_include_paths",

        # Link
        "//toolchain/args:use_lld",
        ":default_link_flags",
        ":default_libs",
    ],
)

cc_args(
    name = "verbose",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        # "-v",
    ],
)

cc_args_list(
    name = "toolchain_args",
    args = select({
        "@platforms//os:macos": [":macos_toolchain_args"],
        "@platforms//os:linux": [":linux_toolchain_args"],
        "//conditions:default": [],
    }, no_match_error = "Unsupported platform for xclang"),
)

cc_toolchain(
    name = "xclang",
    args = [":verbose", ":toolchain_args"],
    known_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        "//toolchain/features:all_non_legacy_builtin_features",
        "//toolchain/features/legacy:all_legacy_builtin_features",
    ],
    enabled_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        # Do not enable this manually. Those features are enabled internally by --compilation_mode flags family.
        # "//toolchain/features:all_non_legacy_builtin_features",
        "//toolchain/features/legacy:all_legacy_builtin_features",
    ],
    tool_map = ":all_tools",
    compiler = "clang",
)

toolchain(
    name = "xclang_toolchain",
    toolchain = ":xclang",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
    # exec_compatible_with = ["@platforms//os:{exec_os}", "@platforms//cpu:{exec_arch}"],
    visibility = ["//visibility:public"],
)

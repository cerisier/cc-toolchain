
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("@rules_cc//cc/toolchains/args:sysroot.bzl", "cc_sysroot")

package(default_visibility = ["//visibility:public"])

# TODO: could be needed if we allow building for macos without the sdk
# cc_args(
#     name = "macos_libc_headers_include_paths",
#     actions = [
#         "@rules_cc//cc/toolchains/actions:compile_actions",
#     ],
#     args = [
#         "-isystem",
#         "{macos_libc_headers_include_path}",
#     ],
#     format = {
#         "macos_libc_headers_include_path": "@zig-srcs//:macos_libc_headers_directory",
#     },
#     data = [
#         "@zig-srcs//:macos_libc_headers_directory",
#     ],
# )

cc_sysroot(
    name = "macos_sdk_sysroot",
    sysroot = "@macosx15.4.sdk//:sysroot",
    args = [
        "-nostdinc++",
        "-nobuiltininc",
        "-nodefaultlibs",
    ],
    data = [
        "@macosx15.4.sdk//:sysroot",
    ],
)

#TODO: Retrieve this from the apple fragment
cc_args(
    name = "macos_minimum_os_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-mmacosx-version-min=14.0",
    ],
)

cc_args(
    name = "macos_default_link_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-headerpad_max_install_names",
    ],
    env = {
        # Required for hermetic links on macOS
        "ZERO_AR_DATE": "1",
    },
)

cc_args(
    name = "macos_default_libs",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    # -l: is not supported by lld64
    args = [
        # "{System}",
        "{compiler_rt_builtins}",
        #TODO: Handle libc++ with -L
        #      Since downstreams could be using -lc++
        #      and link against the one from the sdk...
        "{libcxx}",
        "{libcxxabi}",
        # "-L{libc_library_search_path}",
        "-lSystem",
    ],
    format = {
        # "System": "@zig-srcs//:libSystem.tbd",
        "compiler_rt_builtins": "@compiler-rt//:builtins.static",
        "libcxx": "@zig-srcs//:c++",
        "libcxxabi": "@zig-srcs//:c++abi",
        # "libc_library_search_path": "//glibc:search_directory",
    },
    data = [
        # "@zig-srcs//:libSystem.tbd",
        "@compiler-rt//:builtins.static",
        "@zig-srcs//:c++",
        "@zig-srcs//:c++abi",
        # "//glibc:search_directory",
    ],
)


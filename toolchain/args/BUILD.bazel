load("@rules_cc//cc/toolchains:args.bzl", "cc_args")

package(default_visibility = ["//visibility:public"])

# COMMON RESET FLAGS
# --no-default-config
# -fno-spell-checking

    # if (target.cpu.arch.isArm()) {
    #     try argv.append(if (target.cpu.arch.isThumb()) "-mthumb" else "-mno-thumb");
    # }

# -mcpu for arm assembly 


cc_args(
    name = "llvm_target_for_platform",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-target",
    ] + select({
        #TODO: Generate this automatically
        "//platforms/config/libc_aware:linux_x86_64": ["x86_64-linux-gnu"],
        "//platforms/config/libc_aware:linux_aarch64": ["aarch64-linux-gnu"],
        "//platforms/config/libc_aware:linux_x86_64_gnu": ["x86_64-linux-gnu"],
        "//platforms/config/libc_aware:linux_aarch64_gnu": ["aarch64-linux-gnu"],
        "//platforms/config/libc_aware:linux_x86_64_musl": ["x86_64-linux-musl"],
        "//platforms/config/libc_aware:linux_aarch64_musl": ["aarch64-linux-musl"],
        "//platforms/config:macos_aarch64": ["aarch64-apple-darwin"],
    }, no_match_error = "Unsupported platform"),
)


cc_args(
    name = "posix_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-isystem",
        "{posix_headers_include_path}",
    ],
    format = {
        "posix_headers_include_path": "@zig-srcs//:include",
    },
    data = [
        "@zig-srcs//:include",
    ],
)

#TODO: deduplicate or even better: generate a __config_site file with this
COMMON_CXX_DEFINES = [
    "-D_LIBCPP_ABI_VERSION=1",
    "-D_LIBCPP_ABI_NAMESPACE=__1",
    "-D_LIBCPP_HAS_THREADS", # HANDLE NO THREADS
    "-D_LIBCPP_HAS_MONOTONIC_CLOCK",
    "-D_LIBCPP_HAS_TERMINAL",
    "-D_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS",
    "-D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS",
    "-D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS",
    "-D_LIBCPP_HAS_FILESYSTEM", # HANDLE NO FILEYSSTEM
    "-D_LIBCPP_HAS_RANDOM_DEVICE",
    "-D_LIBCPP_HAS_LOCALIZATION",
    "-D_LIBCPP_HAS_UNICODE",
    "-D_LIBCPP_HAS_WIDE_CHARACTERS",
    "-D_LIBCPP_HAS_NO_STD_MODULES",
    "-D_LIBCPP_HAS_TIME_ZONE_DATABASE", # LINUX
    "-D_LIBCPP_PSTL_BACKEND_SERIAL",
    "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_NONE",
    # "-D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION", # GLIBC < 2.16
    "-D_LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS",
] + select({
    "//constraints/libc:musl": [
        "-D_LIBCPP_HAS_MUSL_LIBC",
        "-D_LIBCXX_HAS_MUSL_LIBC",
    ],
    "//conditions:default": [
        "-D_LIBCXX_HAS_NOMUSL_LIBC",
        "-D_LIBCPP_HAS_NOMUSL_LIBC",
    ],
})

# move defines in a generated config file ?
cc_args(
    name = "libcxx_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_compile_actions",
    ],
    args = COMMON_CXX_DEFINES + [
        "-isystem",
        "{libcxx_headers_include_path}",
        "-isystem",
        "{libcxxabi_headers_include_path}",
    ],
    format = {
        "libcxx_headers_include_path": "@zig-srcs//:libcxx/include",
        "libcxxabi_headers_include_path": "@zig-srcs//:libcxxabi/include",
    },
    data = [
        "@zig-srcs//:libcxx/include",
        "@zig-srcs//:libcxxabi/include",
    ],
)

cc_args(
    name = "static_link_executable",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
    ],
    args = [
        "-static",
    ],
)

cc_args(
    name = "use_lld",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-fuse-ld=lld",
        # lld will be used if it's next to clang.
        # It would have been great to set the path explicitly.
        # "--ld-path={lld_path}",
    ] + select({
        "@platforms//os:macos": [],
        #TODO: Put those at the right place, they are applied too early
        "//conditions:default": [
            "-Wl,-no-as-needed",
            "-Wl,--build-id=md5",
            "-Wl,--hash-style=gnu",
            "-Wl,-z,relro,-z,now",
        ],
    }),
)

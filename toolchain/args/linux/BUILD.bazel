
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")

package(default_visibility = ["//visibility:public"])

cc_args(
    name = "linux_no_sysroot",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-nostdinc",
        "-nostdlib",
        # Just in case :)
        "--sysroot=/dev/null",
    ],
)

cc_args(
    name = "linux_system_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-isystem",
        "{linux_system_headers_include_path}",
        "-isystem",
        "{linux_system_headers_include_path2}",
    ],
    format = {
        "linux_system_headers_include_path": "@zig-srcs//:linux_system_headers_arch_specific_directory",
        "linux_system_headers_include_path2": "@zig-srcs//:linux_system_headers_generic_directory",
    },
    data = [
        "@zig-srcs//:linux_system_headers_arch_specific_directory",
        "@zig-srcs//:linux_system_headers_generic_directory",
    ],
)

cc_args(
    name = "glibc_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-DNO_BOOTSTRAP",
        # "__GLIBC_MINOR__={d}", version.minor
        "-isystem",
        "{libc_headers_include_path}",
        "-isystem",
        "{libc_headers_include_path2}",
    ],
    format = {
        "libc_headers_include_path": "@zig-srcs//:libc_headers_arch_specific_directory",
        "libc_headers_include_path2": "@zig-srcs//:libc_headers_generic_directory",
    },
    data = [
        "@zig-srcs//:libc_headers_arch_specific_directory",
        "@zig-srcs//:libc_headers_generic_directory",
    ],
)

cc_args(
    name = "linux_default_libs",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-L.", # needed to -l:bazel-out/...
        "-l:{Scrt1}",
        "-l:{compiler_rt_builtins}",
        "-l:{libunwind}",
        "-l:{libcxx}",
        "-l:{libcxxabi}",
        "-l:{libc_nonshared}",
        # We need to support copts like -lc -ldl etc... 
        "-L{libc_library_search_path}",
        #TODO: Full list of libc libraries to link in the correct order
        "-lc",
        "-ldl",
        "-lpthread",
    ],
    data = [
        "@zig-srcs//:Scrt1.static",
        "@compiler-rt//:builtins.static",
        "@zig-srcs//:libunwind",
        "@zig-srcs//:c++",
        "@zig-srcs//:c++abi",
        "@zig-srcs//:c_nonshared",
        "//glibc:search_directory",
    ],
    format = {
        "Scrt1": "@zig-srcs//:Scrt1.static",
        "compiler_rt_builtins": "@compiler-rt//:builtins.static",
        "libunwind": "@zig-srcs//:libunwind",
        "libcxx": "@zig-srcs//:c++",
        "libcxxabi": "@zig-srcs//:c++abi",
        "libc_nonshared": "@zig-srcs//:c_nonshared",
        "libc_library_search_path": "//glibc:search_directory",
    },
)

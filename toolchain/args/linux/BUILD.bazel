
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")

package(default_visibility = ["//visibility:public"])

cc_args(
    name = "linux_no_sysroot",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-nostdinc",
        "-nostdlib",
        # Just in case :)
        "--sysroot=/dev/null",
    ],
)

cc_args(
    name = "linux_system_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-isystem",
        "{linux_system_headers_include_path}",
        "-isystem",
        "{linux_system_headers_include_path2}",
    ],
    format = {
        "linux_system_headers_include_path": "@zig-srcs//:linux_system_headers_arch_specific_directory",
        "linux_system_headers_include_path2": "@zig-srcs//:linux_system_headers_generic_directory",
    },
    data = [
        "@zig-srcs//:linux_system_headers_arch_specific_directory",
        "@zig-srcs//:linux_system_headers_generic_directory",
    ],
)

cc_args(
    name = "glibc_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        # "__GLIBC_MINOR__={d}", version.minor
        "-isystem",
        "{libc_headers_include_path}",
        "-isystem",
        "{libc_headers_include_path2}",
    ],
    format = {
        "libc_headers_include_path": "@zig-srcs//:glibc_headers_arch_specific_directory",
        "libc_headers_include_path2": "@zig-srcs//:glibc_headers_generic_directory",
    },
    data = [
        "@zig-srcs//:glibc_headers_arch_specific_directory",
        "@zig-srcs//:glibc_headers_generic_directory",
    ],
)

cc_args(
    name = "linux_default_libs_gnu",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        # We need to support copts like -lc -ldl etc...
        "-L{libc_library_search_path}",
        "-L.", # needed to -l:bazel-out/...

        # Only static libraries
        "-l:{Scrt1}",
        "-l:{compiler_rt_builtins}",

        # In prevention of when all of those can be shared libraries.
        "-Wl,--push-state",
        "-Wl,--as-needed",
        "-l:{libunwind}", # only if libcxx on linux
        "-l:{libcxx}",
        "-l:{libcxxabi}",
        "-l:{libc_nonshared}",

        # In newer versions of glibc various libs such as libm, librt are
        # normally included in libc and not available as separate libraries.
        #
        # But in the way we handle generating libc stubs, we chose to generate
        # empty libs for those that have been removed so that we do not have to
        # handle varying inclusions.
        "-lm",
        "-lpthread",
        "-lc",
        "-ldl",
        "-lrt",
        "-lutil",
        "-Wl,--pop-state",
    ],
    data = [
        "@zig-srcs//:glibc_Scrt1.static",
        "@compiler-rt//:builtins.static",
        "@libunwind//:libunwind",
        "@libcxx//:libcxx",
        "@libcxxabi//:libcxxabi",
        "@zig-srcs//:c_nonshared",
        "//libc/glibc:search_directory",
    ],
    format = {
        "Scrt1": "@zig-srcs//:glibc_Scrt1.static",
        "compiler_rt_builtins": "@compiler-rt//:builtins.static",
        "libunwind": "@libunwind//:libunwind",
        "libcxx": "@libcxx//:libcxx",
        "libcxxabi": "@libcxxabi//:libcxxabi",
        "libc_nonshared": "@zig-srcs//:c_nonshared",
        "libc_library_search_path": "//libc/glibc:search_directory",
    },
)


###

cc_args(
    name = "musl_libc_headers_include_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-isystem",
        "{libc_headers_include_path}",
    ],
    format = {
        "libc_headers_include_path": "@musl_libc//:headers_aarch64_include_directory",
    },
    data = [
        "@musl_libc//:headers_aarch64_include_directory",
    ],
)

#TODO: Factorize this and gnu
cc_args(
    name = "linux_default_libs_musl",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        # We need to support copts like -lc -ldl etc...
        "-L{libc_library_search_path}",
        "-L.", # needed to -l:bazel-out/...

        # Only static libraries
        "-l:{Scrt1}",
        "-l:{compiler_rt_builtins}",

        # In prevention of when all of those can be shared libraries.
        "-Wl,--push-state",
        "-Wl,--as-needed",
        "-l:{libunwind}", # only if libcxx on linux
        "-l:{libcxx}",
        "-l:{libcxxabi}",
        # In newer versions of musl_libc various libs such as libm, librt are
        # normally included in libc and not available as separate libraries.
        #
        # But in the way we handle generating libc stubs, we chose to generate
        # empty libs for those that have been removed so that we do not have to
        # handle varying inclusions.
        "-lm",
        "-lpthread",
        "-lc",
        "-ldl",
        "-lrt",
        "-lutil",
        "-Wl,--pop-state",
    ],
    data = [
        "//libc/musl:musl_Scrt1",
        "@compiler-rt//:builtins.static",
        "@libunwind//:libunwind",
        "@libcxx//:libcxx",
        "@libcxxabi//:libcxxabi",
        "//libc/musl:search_directory",
    ],
    format = {
        "Scrt1": "//libc/musl:musl_Scrt1",
        "compiler_rt_builtins": "@compiler-rt//:builtins.static",
        "libunwind": "@libunwind//:libunwind",
        "libcxx": "@libcxx//:libcxx",
        "libcxxabi": "@libcxxabi//:libcxxabi",
        "libc_library_search_path": "//libc/musl:search_directory",
    },
)

alias(
    name = "linux_default_libs",
    actual = select({
        "//constraints/libc:musl": ":linux_default_libs_musl",
        "//platforms/config/libc_aware:gnu": ":linux_default_libs_gnu",
        #TODO: Remove once we have set the default glibc for a given target
        "//constraints/libc:unconstrained": ":linux_default_libs_gnu",
    }),
)

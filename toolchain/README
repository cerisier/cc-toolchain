# TODO

# Support module maps
# Support macOS specific flags (objc and frameworks)

https://github.com/bazelbuild/rules_cc/blob/main/docs/toolchain_api.md

https://github.com/CACI-International/cpp-toolchain/blob/74efb5bc636f48db86652f0cfdb7d46af100e51f/bazel/toolchain.bzl#L31

https://github.com/cortecs-lang/cortecs-cc-toolchain/blob/78792fba9eec75bfac14a0cd20cb0e4973175871/sysroot/alpine/BUILD

https://github.com/lukasoyen/bazel_linux_packages/blob/c50a9bf22122a507d2bb5e348231413a05e6d90f/e2e/toolchains/gcc/BUILD.bazel

https://github.com/lowRISC/opentitan/blob/6d29bb86581892c43d3dea8856b275dc3a40c575/toolchain/README.md

https://cs.opensource.google/pigweed/pigweed/+/main:pw_toolchain/cc/args/BUILD.bazel

# extra_flags_per_feature = {}
# if is_clang:
#     # Only supported by LLVM 14 and later, but required with C++20 and
#     # layering_check as C++ modules are the default.
#     # https://github.com/llvm/llvm-project/commit/0556138624edf48621dd49a463dbe12e7101f17d
#     result = repository_ctx.execute([
#         cc,
#         "-Xclang",
#         "-fno-cxx-modules",
#         "-o",
#         "/dev/null",
#         "-c",
#         str(repository_ctx.path("tools/cpp/empty.cc")),
#     ])
#     if "-fno-cxx-modules" not in result.stderr:
#         extra_flags_per_feature["use_module_maps"] = ["-Xclang", "-fno-cxx-modules"]


# Other Resources

https://github.com/envoyproxy/envoy/blob/main/bazel/rbe/toolchains/configs/linux/clang/cc/cc_toolchain_config.bzl

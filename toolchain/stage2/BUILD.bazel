load("@rules_cc//cc/toolchains:tool.bzl", "cc_tool")
load("@rules_cc//cc/toolchains:tool_map.bzl", "cc_tool_map")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
load("@rules_cc//cc/toolchains/impl:documented_api.bzl", "cc_args_list")
load("@platforms//host:constraints.bzl", "HOST_CONSTRAINTS")
load("//toolchain:selects.bzl", "platform_llvm_binary", "platform_llvm_binaries")

# This `select` happens under the target configuration. For macOS,
# llvm-libtool-darwin should be used when creating static libraries even if the
# exec platform is linux.
alias(
    name = "all_tools",
    actual = select({
        "@platforms//os:macos": ":macos_tools",
        "//conditions:default": ":default_tools",
    }),
    visibility = ["//visibility:public"],
)

COMMON_TOOLS = {
    "@rules_cc//cc/toolchains/actions:assembly_actions": ":clang",
    "@rules_cc//cc/toolchains/actions:c_compile": ":clang",
    "@rules_cc//cc/toolchains/actions:cpp_compile_actions": ":clang++",
    "@rules_cc//cc/toolchains/actions:link_actions": ":lld",
    "@rules_cc//cc/toolchains/actions:objcopy_embed_data": ":llvm-objcopy",
    "@rules_cc//cc/toolchains/actions:strip": ":llvm-strip",
}

cc_tool_map(
    name = "default_tools",
    tools = COMMON_TOOLS | {
        "@rules_cc//cc/toolchains/actions:ar_actions": ":llvm-ar",
    },
    visibility = ["//visibility:private"],
)

cc_tool_map(
    name = "macos_tools",
    tools = COMMON_TOOLS | {
        "@rules_cc//cc/toolchains/actions:ar_actions": ":llvm-libtool-darwin",
    },
    visibility = ["//visibility:private"],
)

cc_tool(
    name = "clang",
    src = platform_llvm_binary("bin/clang"),
)

cc_tool(
    name = "clang++",
    src = platform_llvm_binary("bin/clang++"),
)

cc_tool(
    name = "lld",
    src = platform_llvm_binary("bin/clang++"),
    data = platform_llvm_binaries([
        "bin/ld.lld",
        "bin/ld64.lld",
        "bin/lld",
    ]),
)

cc_tool(
    name = "llvm-ar",
    src = platform_llvm_binary("bin/llvm-ar"),
)

cc_tool(
    name = "llvm-libtool-darwin",
    src = platform_llvm_binary("bin/llvm-libtool-darwin"),
)

cc_tool(
    name = "llvm-objcopy",
    src = platform_llvm_binary("bin/llvm-objcopy"),
)

cc_tool(
    name = "llvm-strip",
    src = platform_llvm_binary("bin/llvm-strip"),
)

constraint_setting(
    name = "bootstrap_stage",
    visibility = ["//visibility:public"],
)

constraint_value(
    name = "bootstrap_stage_2",
    constraint_setting = ":bootstrap_stage",
    visibility = ["//visibility:public"],
)

platform(
    name = "bootstrap_stage_2_platform",
    constraint_values = [
        ":bootstrap_stage_2",
    ],
    parents = ["@local_config_platform//:host"],
    visibility = ["//visibility:public"],
)

cc_args_list(
    name = "platform_specific_args",
    args = select({
        "@platforms//os:macos": [
            "//toolchain/args/macos:macos_minimum_os_flags",
            "//toolchain/args/macos:macos_default_link_flags",
        ],
        "//conditions:default": [],
    }),
)

cc_toolchain(
    name = "stage2",
    args = [
        "//toolchain/args:llvm_target_for_platform",
        "//toolchain/stage2/args:default_link_flags",
        ":platform_specific_args",
    ],
    enabled_features = ["@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features"],
    known_features = ["@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features"],
    tool_map = ":all_tools",
    compiler = "clang",
)

toolchain(
    name = "stage2_toolchain",
    toolchain = ":stage2",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
    exec_compatible_with = HOST_CONSTRAINTS + [
        "//toolchain/stage2:bootstrap_stage_2",
    ],
    visibility = ["//visibility:public"],
)
